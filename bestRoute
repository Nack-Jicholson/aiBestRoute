
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;

public class bestRoute {

	//Maximum amount of solutions each generation contains.
	private static int maxPopSize = 20;
	//Maximum amount of times the program generates new solutions.
    private static int maxGenerations = 100;
	//Stores the location of the file containing the distant matrix.
    private static String DISTANCE_FILENAME = "C:/Users/Daniel/Desktop/Uni/ComputerScience/Year 3/Artificial Intelligence/Coursework/workspace/GeneticAlgorithms/src/cycleTour/distances.txt";
    //Initiates elitism to decide what solutions get selected for crossover and mutation.
    private static int elitism = 1;
	//Array containing the names of all the cities that get visited.
	private static String[] cities = {"Aberdeen", "Ayr", "Edinburgh", "Fort William", "Glasgow", "Inverness", "St Andrews", "Stirling"};
	//The 2D array in which the distances.txt file is read into.
    private static String[][] distance;
    private static int[][] currentPopulation;
    private static int[][] intermediatePopulation;
    //Variable which holds the current best solution.
    private static int bestOfTheBest;
    //Holds the fitness of each solution.
    private static double[] fitness;
    //Holds the distance of the current best solution.
    private static int bestSolutionSoFar;
    //Holds the value of the current best fitness.
    private static double bestFitnessSoFar;
    //Holds the cities in a solution.
    private static int[] referenceSolution;
    private static Random random = new Random();
    
    public static void main(String[] s) {

        int generation;

        //All 1D and 2D arrays initiated here.
        distance = new String[cities.length][cities.length];
        currentPopulation = new int[maxPopSize][cities.length];
        intermediatePopulation = new int[maxPopSize][cities.length];
        fitness = new double[maxPopSize];
        referenceSolution = new int[cities.length];

        //Methods called.
        readMatrix();
        initialiseThePopulation();
        evaluateThePopulation();

        generation = 1;

        //Counts out the generations and calls 
        while (generation < maxGenerations) {
            System.out.println("Generation " + generation);
            produceTheNextGeneration();
            evaluateThePopulation();
            generation++;
            
        }
        System.out.println("Best of the best: " + bestOfTheBest + " miles");
    }

    private static void readMatrix() {

    	String file = DISTANCE_FILENAME;
		BufferedReader br = null;
		String line;
		String comma = ",";
		int index = 0;
		
		try {
			br = new BufferedReader(new FileReader (file));
			
			while ((line = br.readLine()) != null){
				distance[index] = line.split(comma);
				index++;
			}
	
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	} finally {
		if (br != null) {
			try {
				br.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
    }

    
    private static void initialiseThePopulation() {

        int chromosome, i, thisCity, refLength;
        bestFitnessSoFar = 0.0;

        for (chromosome = 0; chromosome < maxPopSize; chromosome++) {
            for (i = 0; i < cities.length; i++) {
                referenceSolution[i] = i;
            }
            refLength = cities.length;
            for (i = 0; i < cities.length; i++) {
            	if(refLength == cities.length) { //Checks if first iteration, if it is set the starting city to 1 which correlates to Edinburgh in the distances matrix.
            		currentPopulation[chromosome][i] = referenceSolution[2];
            		referenceSolution[2] = referenceSolution[refLength - 1];
            		refLength--;
            	} else {
                thisCity = getRandomNumberBetween(0, refLength);
                currentPopulation[chromosome][i] = referenceSolution[thisCity];
                referenceSolution[thisCity] = referenceSolution[refLength - 1];
                refLength--;
            	}
            }
        }
    }


  
    private static void evaluateThePopulation() {
        int chromosome, city, city1, city2;
        double total_distance;

        for (chromosome = 0; chromosome < maxPopSize; chromosome++) {
            total_distance = 0;

            for (city = 0; city < cities.length; city++) {
                city1 = currentPopulation[chromosome][city];
                city2 = currentPopulation[chromosome][(city + 1) % cities.length];
                total_distance += Double.valueOf(distance[city1][city2]);
            }
            if (total_distance == 0) {
                System.out.println("Error");
                System.exit(0);
            }
            fitness[chromosome] = 1.0 / total_distance;
            
            if (fitness[chromosome] >= bestFitnessSoFar) {
                bestFitnessSoFar = fitness[chromosome];
                bestSolutionSoFar = chromosome;
            }
        }

        // print the population and fitnesses
            for(chromosome = 0; chromosome < maxPopSize; chromosome++) {
            	if (chromosome == bestSolutionSoFar) {
                    System.out.print("Best so far: \n");
                    bestOfTheBest = (int) Math.round(1.0 / fitness[chromosome]);
                }
            
            	for (int i = 0; i < cities.length; i++) {
            		for (int j = 0; j < cities.length; j++) {
            			if((currentPopulation[chromosome][i] == j)) {
            				System.out.println(cities[j] + " ");
            			}
            		}
            	}
            System.out.print("(Fitness: " + fitness[chromosome] + ")" + "\n(Total Distance: " + Math.round(1.0 / fitness[chromosome]) + " miles)\n");
            System.out.print("\n");  
            }
    }

    private static int[] crossover(int parent1, int parent2, int[] child) {
        int[] genes_present, chosen;
        genes_present = new int[cities.length];
        chosen = new int[cities.length];
		int i, thisgene, place = 0;

        int rnd = getRandomNumberBetween(0, 1000);
        for (i = 0; i < cities.length; i++) {
            if (rnd < 500) {
                chosen[i] = 1;
            } else {
                chosen[i] = 0;
            }
        }

       
        for (i = 0; i < cities.length; i++) {
            if (chosen[i] == 1) {
                child[i] = currentPopulation[parent1][i];
            }
        }

        for (i = 0; i < cities.length; i++) {
            genes_present[i] = 0;
        }
        for (i = 0; i < cities.length; i++) {
            if (chosen[i] == 1) {
                genes_present[child[i]] = 1;
            }
        }

        for (i = 0; i < cities.length; i++) {
            thisgene = currentPopulation[parent2][i];
            if (genes_present[thisgene] == 0) { //place it in the next unchosen position of the child
                while (chosen[place] == 1) {
                    place++;
                }
                child[place] = thisgene;
                genes_present[thisgene] = 1;
                chosen[place] = 1;
            }
        }
        return child;
    }

    private static void produceTheNextGeneration() {

        int newCandidate, parent1, parent2, gene;
        int child[] = new int[cities.length];

        if (elitism == 1) {
            for (gene = 0; gene < cities.length; gene++) {
                intermediatePopulation[0][gene] = currentPopulation[bestSolutionSoFar][gene];
            }
        }

        for (newCandidate = elitism; newCandidate < maxPopSize; newCandidate++) {
            parent1 = rouletteWheelSelect();
            parent2 = rouletteWheelSelect();
            child = crossover(parent1, parent2, child);
            child = mutate(child);

            for (gene = 0; gene < cities.length; gene++) {
                intermediatePopulation[newCandidate][gene] = child[gene];
            }
        }

        for (newCandidate = 0; newCandidate < maxPopSize; newCandidate++) {
            for (gene = 0; gene < cities.length; gene++) {
                currentPopulation[newCandidate][gene] = intermediatePopulation[newCandidate][gene];
            }
        }
    }

    private static int[] mutate(int[] child) {
        int g = getRandomNumberBetween(0, cities.length);
        int temp = child[g];
        int i = 0;
        child[g] = child[(g + 1) % cities.length];
        child[(g + 1) % cities.length] = temp;
        
        if(child[0] != 2) {
        	temp = child[0];
        	while(child[i] < cities.length) {
        		if (child[i] == 2) {
        			break;
        		} else {
        			i++;
        		}
        	}
        	child[0] = 2;
        	child[i] = temp;
        }
        return child;
    }

    private static int rouletteWheelSelect() {
        double fitTotal, pointer, accumulatingFitness, randReal;
        int chromosome, randint, selected = 0;

        fitTotal = 0.0;
        for (chromosome = 0; chromosome < maxPopSize; chromosome++) {
            fitTotal += fitness[chromosome];
        }

        randint = getRandomNumberFrom(0, 1000000);
        randReal = randint / 1000000.0;
        pointer = fitTotal * randReal;
        accumulatingFitness = 0.0;

        while (selected < maxPopSize) {
            accumulatingFitness += fitness[selected];
            if (pointer < accumulatingFitness) {
                break;
            }

            if (selected != maxPopSize - 1) {
                selected++;
            }
        }
        return selected;
    }

    private static int getRandomNumberBetween(int min, int max) {
        return random.nextInt(max - min) + min;
    }

    public static int getRandomNumberFrom(int min, int max) {
        return getRandomNumberBetween(min, max+1);
    }
}

